% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_simulation.R
\name{run_simulation}
\alias{run_simulation}
\title{Run the simulation}
\usage{
run_simulation(
  path_to_output,
  nb_gens,
  init_comm = default_init_comm(),
  growth_rate = default_growth_rate(),
  competition_sd = default_competition_sd(),
  trait_opt = default_trait_opt(),
  carr_cap_opt = default_carr_cap_opt(),
  carr_cap_width = default_carr_cap_width(),
  prob_mutation = default_prob_mutation(),
  mutation_sd = default_mutation_sd(),
  trait_gap = default_trait_gap(),
  sampling_freq = comrad::set_sampling_freq(nb_gens),
  sampling_frac = default_sampling_frac(),
  seed = default_seed(),
  hpc_job_id = NULL
)
}
\arguments{
\item{path_to_output}{character, path to save the output file, which must be a
\code{.csv}. If \code{NULL}, the output is not saved and the final state of the
community is returned at the end of the simulation.}

\item{nb_gens}{integer, the number of generations to run the
simulation for.}

\item{init_comm}{The initial community, must have the same tibble structure
as the \code{\link[=default_init_comm]{default_init_comm()}}, which contains 10 individuals with \code{z = 0}}

\item{growth_rate}{numeric \verb{>= 0}, the baseline growth rate. Generations
being discrete, high values will cause chaos.}

\item{competition_sd}{numeric \verb{>= 0}.Parameter \eqn{\sigma_{\alpha}} of
the competition coefficient. Modulates the the strength of competition
between two individuals given their distance in trait space.}

\item{trait_opt}{numeric. The optimal trait value.
\code{get_carr_cap(trait_opt) = carr_cap_opt}.}

\item{carr_cap_opt}{numeric. Carrying capacity at the optimal trait value.}

\item{carr_cap_width}{numeric \verb{>= 0}.
Width of the carrying capacity kernel.}

\item{prob_mutation}{numeric between 0 and 1, the probability that any new
individual is sampled with a mutation.}

\item{mutation_sd}{numeric \verb{>= 0}, the standard deviation of the normal
distrbution from which mutations are drawn.}

\item{trait_gap}{numeric, the width of a gap triggering speciation.}

\item{sampling_freq}{numeric \code{> 0}, the frequency (in generations) at
which the community is written to output. See \code{\link[=set_sampling_freq]{set_sampling_freq()}} for the
default option.}

\item{sampling_frac}{numeric (between 0 and 1), fraction of the community
(in terms of individuals) written to output at every sampled generation. A
truncation is operated.}

\item{seed}{integer \code{> 0}, the seed to set for the random number
generator. Defaults to an integer based on current day and time.}

\item{hpc_job_id}{used to record a job ID in the metadata, only relevant for
simulations run on a high-performance cluster. Otherwise takes value
\code{"local"}.}
}
\value{
Returns a table with a row corresponding to each individual, and five
columns: \code{t} is the generation time, \code{z} the individual's trait value,
\code{species} the name of the species it belongs to, and \code{ancestral_species} the
previous species it descends from.
If \code{path_to_output = NULL}, the community at the last generation is returned.
If the path to a \code{.csv} file is supplied, each sampled generation is appended
to the file. In the \code{.csv}, the table is preceded by 17 lines of metadata,
which are automatically ignored if the file is read with \code{\link[=read_comrad_tbl]{read_comrad_tbl()}}.
}
\description{
Run the competitive radiation simulation.
}
\author{
Th√©o Pannetier
}
