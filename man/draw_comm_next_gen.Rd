% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/draw_comm_next_gen.R
\name{draw_comm_next_gen}
\alias{draw_comm_next_gen}
\title{Draw a new community from the current one}
\usage{
draw_comm_next_gen(
  comm,
  growth_rate = default_growth_rate(),
  comp_width = default_comp_width(),
  trait_opt = default_trait_opt(),
  carr_cap_opt = default_carr_cap_opt(),
  carr_cap_width = default_carr_cap_width(),
  prob_mutation = default_prob_mutation(),
  mutation_sd = default_mutation_sd()
)
}
\arguments{
\item{comm}{a tibble with one row per individual in the community and three
columns:
\itemize{
\item \code{z} contains (numeric) traits values
\item \code{species} contains species names (characters)
\item \code{ancestral_species} contains acnestral species names (characters)
}}

\item{growth_rate}{numeric \eqn{>= 0}, the baseline growth rate. Generations
being discrete, high values will cause chaos.}

\item{comp_width}{numeric \eqn{>= 0}. Width of the competition kernel.}

\item{trait_opt}{numeric. The optimal trait value.
\code{get_carr_cap(trait_opt) = carr_cap_opt}.}

\item{carr_cap_opt}{numeric. Carrying capacity at the optimal trait value.}

\item{carr_cap_width}{numeric \eqn{>= 0}.
Width of the carrying capacity kernel.}

\item{prob_mutation}{numeric between 0 and 1, the probability that any new
individual is sampled with a mutation.}

\item{mutation_sd}{numeric \eqn{>= 0}, the standard deviation of the normal
distrbution from which mutations are drawn.}
}
\description{
Based on the current community traits, compute the fitness, draw
offspring, apply mutations and speciation events were relevant.
}
\author{
Th√©o Pannetier
}
