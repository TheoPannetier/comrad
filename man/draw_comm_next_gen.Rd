% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/draw_comm_next_gen.R
\name{draw_comm_next_gen}
\alias{draw_comm_next_gen}
\title{Draw a new community from the current one}
\usage{
draw_comm_next_gen(
  comm,
  growth_rate = default_growth_rate(),
  competition_sd = default_competition_sd(),
  trait_opt = default_trait_opt(),
  carrying_cap_opt = default_carrying_cap_opt(),
  carrying_cap_sd = default_carrying_cap_sd(),
  mutation_sd = default_mutation_sd(),
  trait_dist_sp = default_trait_dist_sp(),
  brute_force_opt = "none"
)
}
\arguments{
\item{comm}{a tibble with one row per individual in the community and three
columns:
\itemize{
\item \code{z} contains (numeric) traits values
\item \code{species} contains species names (characters)
\item \code{ancestral_species} contains acnestral species names (characters)
}}

\item{growth_rate}{numeric \verb{>= 0}, the baseline growth rate. Generations
being discrete, high values will cause chaos.}

\item{competition_sd}{numeric \verb{>= 0}.Parameter \eqn{\sigma_{\alpha}} of
the competition coefficient. Modulates the the strength of competition
between two individuals given their distance in trait space.}

\item{trait_opt}{numeric. The optimal trait value, \eqn{z_{opt}}.
\code{get_carrying_cap(trait_opt) = carrying_cap_opt}.}

\item{carrying_cap_opt}{numeric, value of the carrying capacity at
\code{trait_opt}}

\item{carrying_cap_sd}{numeric \verb{>= 0}. Parameter \eqn{\sigma_K} of the
carrying capacity. Modulates how fast the carrying capacity decays when
moving away from the optimal trait value.}

\item{mutation_sd}{numeric \verb{>= 0}, the standard deviation of the normal
distrbution from which mutations are drawn.}

\item{trait_dist_sp}{numeric, the minimal trait distance between two
clusters of individuals triggering speciation.}

\item{brute_force_opt}{a string specifying which brute force option to use
to speed up the calculation of competition coefficients. Defaults to "none".
Other options are "omp", for multithreading with OpenMP, "simd" for single
instruction, multiple data (SIMD) via the C++ library
\href{https://github.com/xtensor-stack/xsimd}{\code{xsimd}}; and "simd_omp" for both.}
}
\description{
From the trait values of the current community, compute the fitness, draw
offspring, apply mutations and resolve speciation events.
}
\author{
Th√©o Pannetier
}
